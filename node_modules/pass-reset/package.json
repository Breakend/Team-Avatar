{
  "author": {
    "name": "James Brumond",
    "email": "james@sportzing.com",
    "url": "http://jbrumond.me"
  },
  "name": "pass-reset",
  "description": "A drop-in password reseting module",
  "version": "0.1.2",
  "main": "lib/index.js",
  "dependencies": {
    "uuid-v4": "0.1.0",
    "json-output": "0.1.2",
    "async": "~0.1.22"
  },
  "devDependencies": {
    "buster": "0.5.3",
    "express": "latest"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# pass-reset\n\nAn _express_ compatable module for creating RESTful password reset endpoints.\n\n## Install\n\n```bash\n$ npm install pass-reset\n```\n\n## Configuration\n\n##### Example expiration\n\n```javascript\nvar passReset = require('pass-reset');\n\n// The unit (second param) can be one of the following (or undefined for milliseconds):\n//   \"secs\", \"mins\", \"hours\", \"days\", or \"weeks\"\npassReset.expireTimeout(12, 'hours');\n```\n\n##### Example user lookup routine\n\n```javascript\nvar passReset = require('pass-reset');\n\npassReset.lookupUsers(function(login, callback) {\n\tUser.find({ username: login }, function(err, users) {\n\t\tif (err) {return callback(err);}\n\t\tif (! users.length) {return callback(null, false);}\n\t\tvar user = users[0];\n\t\tcallback(null, {\n\t\t\temail: user.email,\n\t\t\tusers: [{\n\t\t\t\tid: user.id,\n\t\t\t\tname: user.username\n\t\t\t}]\n\t\t});\n\t});\n});\n```\n\n##### Example set password routine\n\n```javascript\nvar passReset = require('pass-reset');\n\npassReset.setPassword(function(id, password, callback) {\n\tif (password.length < 8) {\n\t\treturn callback(null, false, 'Password must be at least 8 characters');\n\t}\n\tvar hash = doHash(password);\n\tvar update = { $set: { password: hash } };\n\tUser.update({ id: id }, update, { }, function(err) {\n\t\tif (err) {return callback(err);}\n\t\tcallback(null, true);\n\t});\n});\n```\n\n##### Example send email routine\n\n```javascript\nvar passReset = require('pass-reset');\n\nvar template = handlebars.compile([\n\t'<p>You requested a password reset for the following account(s).</p>',\n\t'<ul>',\n\t'{{#each resets}}',\n\t\t'<li>{{name}}: <a href=\"{{url}}\">{{url}}</a></li>',\n\t'{{/each}}',\n\t'</ul>'\n].join('\\n'));\n\npassReset.sendEmail(function(email, resets, callback) {\n\tmailer.send({\n\t\tto: email,\n\t\tfrom: 'noreply@example.com',\n\t\tsubject: 'password reset',\n\t\tbody: template({ resets: resets })\n\t});\n\tcallback(null, true);\n});\n```\n\n##### Example custom storage for tokens\n\n```javascript\nvar passReset  = require('pass-reset');\nvar redis      = require('redis-url').connect(/* ... */);\n\npassReset.storage.setStore({\n\tcreate: function(id, token, callback) {\n\t\tredis.set(token, id, callback);\n\t\tredis.expire(token, Math.round(passReset.expireTimeout() / 1000));\n\t},\n\tlookup: function(token, callback) {\n\t\tredis.get(token, callback);\n\t},\n\tdestroy: function(token, callback) {\n\t\tredis.del(token, callback);\n\t}\n});\n```\n\n## Usage\n\n##### Route for requesting a new reset token\n\n```javascript\napp.post('/password/reset',\n\tpassReset.requestResetToken()\n);\n```\n\nThe `requestResetToken` method can also take an object of configuration values. The following values are supported:\n\n* __loginParam__ - The name of the param where the login data (username/email) can be found in `req.body`.\n* __callbackURL__ - The base URL to direct users to actually perform the reset. This value should contain a `\"{token}\"` somewhere which will be replaced with the token, eg. `\"/password/reset/{token}\"`.\n* __next__ - By default, when pass-reset is done generating a token and sending it, an empty 200 OK response will be sent. To change this behavior, this value can be given a few different values. If a string is given, it is treated as a redirect, if a function is given, it will be called with the `req`, `res`, and `next` parameters, and if any other truthy value is given, the `next` function will simply be called.\n\n```javascript\napp.post('/password/reset',\n\tpassReset.requestResetToken({\n\t\tnext: true,\n\t\tloginParam: 'login',\n\t\tcallbackURL: '/password/reset/{token}',\n\t}),\n\tfunction(req, res) {\n\t\t// ...\n\t}\n);\n```\n\n##### Route for actually reseting passwords\n\n```javascript\napp.put('/password/reset',\n\tpassReset.resetPassword()\n);\n```\n\nThe `resetPassword` method can also take an object of configuration values. The following values are supported:\n\n* __tokenParam__/__passwordParam__/__confirmParam__ - The name of the params where the respective data (token/password/confirm) can be found in `req.body`.\n* __next__ - By default, after the password is reset, an empty 200 OK response will be sent. To change this behavior, this value can be given a few different values. If a string is given, it is treated as a redirect, if a function is given, it will be called with the `req`, `res`, and `next` parameters, and if any other truthy value is given, the `next` function will simply be called.\n\n```javascript\napp.put('/password/reset',\n\tpassReset.resetPassword({\n\t\tnext: true,\n\t\ttokenParam: 'token',\n\t\tpasswordParam: 'password',\n\t\tconfirmParam: 'confirm'\n\t}),\n\tfunction(req, res) {\n\t\t// ...\n\t}\n);\n```\n\n",
  "readmeFilename": "readme.md",
  "_id": "pass-reset@0.1.2",
  "dist": {
    "shasum": "1335601bc731428d9e3fae7d40e9b35843685060"
  },
  "_from": "pass-reset@*",
  "_resolved": "https://registry.npmjs.org/pass-reset/-/pass-reset-0.1.2.tgz"
}
