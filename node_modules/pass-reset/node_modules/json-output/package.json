{
  "author": {
    "name": "James Brumond",
    "email": "james@sportzing.com",
    "url": "http://jbrumond.me"
  },
  "name": "json-output",
  "description": "A Node.js module that assists with creating standard JSON structures for HTTP output",
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/SportZing/json-output.git"
  },
  "main": "lib/index.js",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "\n# JSON Output Helper Utils\n\n## Install\n\n```bash\n$ npm install json-output\n```\n\n## Usage\n\n```javascript\nvar json = require('json-output');\n\n\njson.error(new Error('foo'));\n/*\n   { message: 'Foo',\n     stack: 'Error: Foo\\n    at repl:1:10\\n    at REPLServer.self.eval (repl.js:111:21)\\n    at Interface.<anonymous> (repl.js:250:12)\\n    at Interface.EventEmitter.emit (events.js:88:17)\\n    at Interface._onLine (readline.js:183:10)\\n    at Interface._line (readline.js:502:8)\\n    at Interface._ttyWrite (readline.js:720:14)\\n    at ReadStream.<anonymous> (readline.js:105:12)\\n    at ReadStream.EventEmitter.emit (events.js:115:20)\\n    at emitKey (readline.js:1042:12)',\n     stackArray: \n      [ 'at repl:1:10',\n        'at REPLServer.self.eval (repl.js:111:21)',\n        'at Interface.<anonymous> (repl.js:250:12)',\n        'at Interface.EventEmitter.emit (events.js:88:17)',\n        'at Interface._onLine (readline.js:183:10)',\n        'at Interface._line (readline.js:502:8)',\n        'at Interface._ttyWrite (readline.js:720:14)',\n        'at ReadStream.<anonymous> (readline.js:105:12)',\n        'at ReadStream.EventEmitter.emit (events.js:115:20)',\n        'at emitKey (readline.js:1042:12)' ] } }\n*/\n\n\njson.error('This is an error message');\n/*\n   { message: 'This is an error message' }\n*/\n\n\n/**\n * Send an JSON error response in an express app\n */\napp.get('/some/route', function(req, res) {\n\tvar sendJson = json.respondTo(res);\n\ttry {\n\t\tdoSomethingCool();\n\t} catch (err) {\n\t\tsendJson.error(err, 500);\n\t\treturn;\n\t}\n\tsendJson({ status: 'OK' });\n});\n```\n\n## API\n\n### Object json.error ( Mixed error )\n\nCreates a uniform JSON error object. All error objects will at least contain a `message` property. Other properties that will be added as available are `stack`, `stackArray`, and `status`.\n\n### Function json.respondTo ( HTTPResponse res )\n\nReturns a function for sending JSON responses.\n\n```javascript\napp.get('/foo', function(req, res) {\n\tvar sendJson = json.respondTo(res);\n\tdoFoo(function(err) {\n\t\tif (err) {\n\t\t\tsendJson.error(err);\n\t\t}\n\t\tsendJson({ status: 'OK' });\n\t});\n});\n```\n\n#### void sendJson ( Mixed json[, Number status = 200 ])\n\nSends a JSON response, equivilent to calling `res.json(json, status)`.\n\n#### void sendJson.error ( Mixed error[, Number status = 500 ])\n\nSends a JSON error response. The `error` value will be parsed using `json.error` before sending. If a `status` is given as a parameter, that status code will always take priority. If there is not one given, the parsed error object will be checked for a `status` property, and if one is found, that status will be used. If no status is given in either place, the default is 500.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/SportZing/json-output/issues"
  },
  "_id": "json-output@0.1.2",
  "dist": {
    "shasum": "f0b719abd6b78ca3d19d08e7733b290f90415714"
  },
  "_from": "json-output@0.1.2",
  "_resolved": "https://registry.npmjs.org/json-output/-/json-output-0.1.2.tgz"
}
